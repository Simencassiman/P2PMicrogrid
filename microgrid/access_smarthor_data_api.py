# Python Librariesfrom typing import Dictimport urllibimport numpy as npimport requestsimport jsonfrom datetime import datetimeimport matplotlib.pyplot as plt# Local modulesfrom config import user, pswd# Format access pointURL = 'https://st-dev-data-api.azurewebsites.net'# url = urllib.parse.urljoin(URL, '/api/v0.1/buildings/energyville1/transfo/realtime/properties')endpoints = {    'load': '/api/v0.1/buildings/energyville1/transfo/realtime',    'weather': '/api/v0.1/weather/forecasts/darksky/hourly/latest/'}endpoint_params: Dict[str, Dict[str, str]] = {    'load': {'transfo_id': 'transfo1', 'properties': 'ActiveImport'},    'weather': {'locations': 'Genk'}}# Format parametersDATE_FORMAT_STR = "%Y-%m-%d"start = datetime(2021, 11, 1)end = datetime(2021, 11, 2)params = {    # SmarThor parameters    'start': start.strftime(DATE_FORMAT_STR),    'end': end.strftime(DATE_FORMAT_STR),    'time_zone': 'Central European Standard Time'}def handle_result(key: str, response: requests.Response) -> None:    # measurements, time = zip(*[(reading['ActiveImport'], reading['DateTimeMeasurement'])    #                            for reading in response.json()['data']])    #    # with open('data/data.json', 'w') as outfile:    #     json.dump({'time': time, 'values': measurements}, outfile)    passdef weather_data() -> None:    time, *series = \        zip(*[(reading['DateTimeMeasurement'], reading['Temperature'], reading['CloudCover'], reading['Humidity'])              for reading in result.json()['data']])    t = [4 * i for i in range(len(time))]    tt = [i for i in range(t[-1] + 3)]    to_store = {}    for label, data in zip(['temperature', 'cloud_cover', 'humidity'], series):        to_store[label] = np.interp(tt, t, data).tolist()    with open('data/profiles_1.json') as file, open('data/profiles.json', 'w') as out_file:        d = json.load(file)        json.dump(d | to_store, out_file)def get_all_endpoints():    for k, endpoint in endpoints.items():        url = urllib.parse.urljoin(URL, endpoint)        # Send request        response = requests.get(url, params=params | endpoint_params[k], auth=(user, pswd))        # Visualise / Save response        # print(result.text)        if response.ok:            handle_result(endpoint, response)        else:            print(result.status_code)# Main program that will runif __name__ == "__main__":    key = 'weather'    url = urllib.parse.urljoin(URL, endpoints[key])    # Send request    result = requests.get(url, params=params|endpoint_params[key], auth=(user, pswd))    # Visualise / Save response    print(result.status_code)    print(result.text)    if result.ok:        time, *series = \            zip(*[(reading['DateTimeMeasurement'], reading['Temperature'], reading['CloudCover'], reading['Humidity'])                  for reading in result.json()['data']])        t = [4*i for i in range(len(time))]        tt = [i for i in range(t[-1] + 3)]        to_store = {}        for label, data in zip(['temperature', 'cloud_cover', 'humidity'], series):            to_store[label] = np.interp(tt, t, data).tolist()        with open('data/profiles_1.json') as file, open('data/profiles.json', 'w') as out_file:            d = json.load(file)            json.dump(d | to_store, out_file)        plt.plot(tt, to_store['temperature'])        plt.show()